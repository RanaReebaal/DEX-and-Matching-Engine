/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface EventfulOrderbookInterface extends utils.Interface {
  functions: {};

  events: {
    "DeleteOffer(uint256,address,address,address)": EventFragment;
    "MakerFeePaid(uint256,address,address,uint128)": EventFragment;
    "OfferCreate(address,address,uint8,uint128,uint128,uint256,address)": EventFragment;
    "OfferTake(uint8,address,address,uint128,uint128,uint256,address,address)": EventFragment;
    "OfferUpdate(uint256,uint128,uint128)": EventFragment;
    "OrderCancelled(uint256,address,address,address)": EventFragment;
    "TakerFeePaid(uint256,address,address,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeleteOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerFeePaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferCreate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferTake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OfferUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerFeePaid"): EventFragment;
}

export interface DeleteOfferEventObject {
  id: BigNumber;
  maker: string;
  token1: string;
  token2: string;
}
export type DeleteOfferEvent = TypedEvent<
  [BigNumber, string, string, string],
  DeleteOfferEventObject
>;

export type DeleteOfferEventFilter = TypedEventFilter<DeleteOfferEvent>;

export interface MakerFeePaidEventObject {
  id: BigNumber;
  maker: string;
  tokPaid: string;
  feePaid: BigNumber;
}
export type MakerFeePaidEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  MakerFeePaidEventObject
>;

export type MakerFeePaidEventFilter = TypedEventFilter<MakerFeePaidEvent>;

export interface OfferCreateEventObject {
  token1: string;
  token2: string;
  tok1Type: number;
  tok1Amt: BigNumber;
  tok2Amt: BigNumber;
  id: BigNumber;
  maker: string;
}
export type OfferCreateEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber, BigNumber, string],
  OfferCreateEventObject
>;

export type OfferCreateEventFilter = TypedEventFilter<OfferCreateEvent>;

export interface OfferTakeEventObject {
  tok1Type: number;
  token1: string;
  token2: string;
  tok1Amt: BigNumber;
  tok2Amt: BigNumber;
  id: BigNumber;
  maker: string;
  taker: string;
}
export type OfferTakeEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber, BigNumber, string, string],
  OfferTakeEventObject
>;

export type OfferTakeEventFilter = TypedEventFilter<OfferTakeEvent>;

export interface OfferUpdateEventObject {
  id: BigNumber;
  tok1Amt: BigNumber;
  tok2Amt: BigNumber;
}
export type OfferUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  OfferUpdateEventObject
>;

export type OfferUpdateEventFilter = TypedEventFilter<OfferUpdateEvent>;

export interface OrderCancelledEventObject {
  id: BigNumber;
  maker: string;
  token1: string;
  token2: string;
}
export type OrderCancelledEvent = TypedEvent<
  [BigNumber, string, string, string],
  OrderCancelledEventObject
>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface TakerFeePaidEventObject {
  id: BigNumber;
  taker: string;
  tokPaid: string;
  feePaid: BigNumber;
}
export type TakerFeePaidEvent = TypedEvent<
  [BigNumber, string, string, BigNumber],
  TakerFeePaidEventObject
>;

export type TakerFeePaidEventFilter = TypedEventFilter<TakerFeePaidEvent>;

export interface EventfulOrderbook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventfulOrderbookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DeleteOffer(uint256,address,address,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      token1?: null,
      token2?: null
    ): DeleteOfferEventFilter;
    DeleteOffer(
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      token1?: null,
      token2?: null
    ): DeleteOfferEventFilter;

    "MakerFeePaid(uint256,address,address,uint128)"(
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      tokPaid?: null,
      feePaid?: null
    ): MakerFeePaidEventFilter;
    MakerFeePaid(
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      tokPaid?: null,
      feePaid?: null
    ): MakerFeePaidEventFilter;

    "OfferCreate(address,address,uint8,uint128,uint128,uint256,address)"(
      token1?: null,
      token2?: null,
      tok1Type?: null,
      tok1Amt?: null,
      tok2Amt?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null
    ): OfferCreateEventFilter;
    OfferCreate(
      token1?: null,
      token2?: null,
      tok1Type?: null,
      tok1Amt?: null,
      tok2Amt?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null
    ): OfferCreateEventFilter;

    "OfferTake(uint8,address,address,uint128,uint128,uint256,address,address)"(
      tok1Type?: null,
      token1?: null,
      token2?: null,
      tok1Amt?: null,
      tok2Amt?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null
    ): OfferTakeEventFilter;
    OfferTake(
      tok1Type?: null,
      token1?: null,
      token2?: null,
      tok1Amt?: null,
      tok2Amt?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      taker?: PromiseOrValue<string> | null
    ): OfferTakeEventFilter;

    "OfferUpdate(uint256,uint128,uint128)"(
      id?: PromiseOrValue<BigNumberish> | null,
      tok1Amt?: null,
      tok2Amt?: null
    ): OfferUpdateEventFilter;
    OfferUpdate(
      id?: PromiseOrValue<BigNumberish> | null,
      tok1Amt?: null,
      tok2Amt?: null
    ): OfferUpdateEventFilter;

    "OrderCancelled(uint256,address,address,address)"(
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      token1?: null,
      token2?: null
    ): OrderCancelledEventFilter;
    OrderCancelled(
      id?: PromiseOrValue<BigNumberish> | null,
      maker?: PromiseOrValue<string> | null,
      token1?: null,
      token2?: null
    ): OrderCancelledEventFilter;

    "TakerFeePaid(uint256,address,address,uint128)"(
      id?: PromiseOrValue<BigNumberish> | null,
      taker?: PromiseOrValue<string> | null,
      tokPaid?: null,
      feePaid?: null
    ): TakerFeePaidEventFilter;
    TakerFeePaid(
      id?: PromiseOrValue<BigNumberish> | null,
      taker?: PromiseOrValue<string> | null,
      tokPaid?: null,
      feePaid?: null
    ): TakerFeePaidEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface EventfulOrderbookInterface extends utils.Interface {
  functions: {};

  events: {
    "FoKOrder(uint128,uint128,uint8)": EventFragment;
    "IoCOrder(uint128,uint128,uint8)": EventFragment;
    "MakerOrderCreated(uint256,uint256)": EventFragment;
    "TakerOrder(uint128,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FoKOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IoCOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MakerOrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakerOrder"): EventFragment;
}

export interface FoKOrderEventObject {
  token1Amt: BigNumber;
  token2Amt: BigNumber;
  sellingToken1: number;
}
export type FoKOrderEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  FoKOrderEventObject
>;

export type FoKOrderEventFilter = TypedEventFilter<FoKOrderEvent>;

export interface IoCOrderEventObject {
  token1Amt: BigNumber;
  token2Amt: BigNumber;
  sellingToken1: number;
}
export type IoCOrderEvent = TypedEvent<
  [BigNumber, BigNumber, number],
  IoCOrderEventObject
>;

export type IoCOrderEventFilter = TypedEventFilter<IoCOrderEvent>;

export interface MakerOrderCreatedEventObject {
  id: BigNumber;
  position: BigNumber;
}
export type MakerOrderCreatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  MakerOrderCreatedEventObject
>;

export type MakerOrderCreatedEventFilter =
  TypedEventFilter<MakerOrderCreatedEvent>;

export interface TakerOrderEventObject {
  tokenAmt: BigNumber;
  spendingToken1: number;
}
export type TakerOrderEvent = TypedEvent<
  [BigNumber, number],
  TakerOrderEventObject
>;

export type TakerOrderEventFilter = TypedEventFilter<TakerOrderEvent>;

export interface EventfulOrderbook extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventfulOrderbookInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "FoKOrder(uint128,uint128,uint8)"(
      token1Amt?: null,
      token2Amt?: null,
      sellingToken1?: null
    ): FoKOrderEventFilter;
    FoKOrder(
      token1Amt?: null,
      token2Amt?: null,
      sellingToken1?: null
    ): FoKOrderEventFilter;

    "IoCOrder(uint128,uint128,uint8)"(
      token1Amt?: null,
      token2Amt?: null,
      sellingToken1?: null
    ): IoCOrderEventFilter;
    IoCOrder(
      token1Amt?: null,
      token2Amt?: null,
      sellingToken1?: null
    ): IoCOrderEventFilter;

    "MakerOrderCreated(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      position?: PromiseOrValue<BigNumberish> | null
    ): MakerOrderCreatedEventFilter;
    MakerOrderCreated(
      id?: PromiseOrValue<BigNumberish> | null,
      position?: PromiseOrValue<BigNumberish> | null
    ): MakerOrderCreatedEventFilter;

    "TakerOrder(uint128,uint8)"(
      tokenAmt?: null,
      spendingToken1?: null
    ): TakerOrderEventFilter;
    TakerOrder(tokenAmt?: null, spendingToken1?: null): TakerOrderEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  OrderbookErrors,
  OrderbookErrorsInterface,
} from "../../../contracts/errors/OrderbookErrors";

const _abi = [
  {
    inputs: [],
    name: "EscrowToBuyerError",
    type: "error",
  },
  {
    inputs: [],
    name: "InactiveOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidFeeValue",
    type: "error",
  },
  {
    inputs: [],
    name: "LackingFundsForFees",
    type: "error",
  },
  {
    inputs: [],
    name: "LackingFundsForTransaction",
    type: "error",
  },
  {
    inputs: [],
    name: "NonOwnerCantCancelOrder",
    type: "error",
  },
  {
    inputs: [],
    name: "QuantityExceedsOrderAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "SellingTokenNotBool",
    type: "error",
  },
  {
    inputs: [],
    name: "TransferToEscrowError",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroBuyQuantity",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroTokenAmount",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122083ffa52a1434f9ddfc90dbd8b5af70f4641b00d41cab6f5dce2c308e0f83c6ff64736f6c63430008120033";

type OrderbookErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OrderbookErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OrderbookErrors__factory extends ContractFactory {
  constructor(...args: OrderbookErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OrderbookErrors> {
    return super.deploy(overrides || {}) as Promise<OrderbookErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OrderbookErrors {
    return super.attach(address) as OrderbookErrors;
  }
  override connect(signer: Signer): OrderbookErrors__factory {
    return super.connect(signer) as OrderbookErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OrderbookErrorsInterface {
    return new utils.Interface(_abi) as OrderbookErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OrderbookErrors {
    return new Contract(address, _abi, signerOrProvider) as OrderbookErrors;
  }
}

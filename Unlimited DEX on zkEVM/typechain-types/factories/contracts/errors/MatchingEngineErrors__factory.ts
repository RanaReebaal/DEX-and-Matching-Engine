/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MatchingEngineErrors,
  MatchingEngineErrorsInterface,
} from "../../../contracts/errors/MatchingEngineErrors";

const _abi = [
  {
    inputs: [],
    name: "FillOrKillNotFilled",
    type: "error",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200f43fabeec111dd238f745c28d66f22aed1920a6d5a82fe796ac308fc33db47964736f6c63430008120033";

type MatchingEngineErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MatchingEngineErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MatchingEngineErrors__factory extends ContractFactory {
  constructor(...args: MatchingEngineErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MatchingEngineErrors> {
    return super.deploy(overrides || {}) as Promise<MatchingEngineErrors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MatchingEngineErrors {
    return super.attach(address) as MatchingEngineErrors;
  }
  override connect(signer: Signer): MatchingEngineErrors__factory {
    return super.connect(signer) as MatchingEngineErrors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MatchingEngineErrorsInterface {
    return new utils.Interface(_abi) as MatchingEngineErrorsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MatchingEngineErrors {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MatchingEngineErrors;
  }
}
